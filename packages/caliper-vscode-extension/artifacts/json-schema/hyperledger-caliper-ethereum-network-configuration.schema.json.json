{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "caliper": {
        "type": "object",
        "properties": {
          "blockchain": {
            "type": "string"
          },
          "command": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string"
              },
              "end": {
                "type": "string"
              }
            },
            "required": [
              "start",
              "end"
            ]
          }
        },
        "required": [
          "blockchain",
          "command"
        ]
      },
      "ethereum": {
        "type": "object",
        "properties": {
          "url": {
            "description": "The URL of the node to connect to. Any host and port can be used if it is reachable. Currently only websocket is supported.",
            "type": "string"
          },
          "contractDeployerAddress": {
            "description": "The address to use to deploy contracts of the network. Without particular or specific needs it can be set to be equal to the benchmark address. Its private key must be hold by the node connected with URL and it must be provided in the checksum form (the one with both lowercase and uppercase letters).",
            "type": "string"
          },
          "contractDeployerAddressPrivateKey": {
            "description": "The private key for the deployer address. If present then transactions are signed inside caliper and sent “raw” to the ethereum node.",
            "type": "string"
          },
          "contractDeployerAddressPassword": {
            "description": "The password to use to unlock deployer address. If there isn’t an unlock password, this key must be present as empty string. If the deployer address private key is present this is not used.",
            "type": "string"
          },
          "fromAddress": {
            "description": "The address to use while invoking all the methods of the benchmark. Its private key must be hold by the node connected with URL and it must be provided in the checksum form (the one with both lowercase and uppercase letters).",
            "type": "string"
          },
          "fromAddressSeed": {
            "description": "As an alternative to fromAddress, fromAddressPrivateKey, and fromAddressPassword the network configuration can use a fixed seed and derive needed addresses via BIP-44 key derivation. Each caliper test worker will generate an address for use as fromAddress and fromAddressPrivateKey using the derivation path m/44'/60'/<x>'/0/0, where is the `clientIdx` passed into `getContext`. This configuration does not override fromAddress, but it takes priority over fromAddressPrivateKey and fromAddressPassword.",
            "type": "string"
          },
          "fromAddressPrivateKey": {
            "description": "The private key for the benchmark address. If present then transactions are signed inside caliper and sent “raw” to the ethereum node. This configuration takes priority over fromAddressPassword.",
            "type": "string"
          },
          "fromAddressPassword": {
            "description": "The password to use to unlock benchmark address. If there isn’t an unlock password, this key must be present as empty string. If the benchmark address private key is present this is not used.",
            "type": "string"
          },
          "transactionConfirmationBlocks": {
            "description": "It is the number of blocks the adapter will wait before warn Caliper that a transaction has been successfully executed on the network. You can freely tune it from 1 to the desired confirmations. Keep in mind that in the Ethereum main net (PoW), 12 to 20 confirmations can be required to consider a transaction as accepted in the blockchain. If you’re using different consensus algorith (like clique in the example network provided) it can be safely brought to a lower value. In any case it is up to you.",
            "type": "integer"
          },
          "contracts": {
            "description": "It is the list, provided as a json object, of contracts to deploy on the network before running the benchmark. You should provide a json entry for each contract; the key will represent the contract identifier to invoke methods on that contract. URL for more information: https://hyperledger.github.io/caliper/v0.5.0/ethereum-config/#contract-configuration",
            "type": "object",
            "properties": {
              "simple": {
                "type": "object",
                "properties": {
                  "path": {
                    "description": "For each key you must provide a JSON object with the path field pointing to the contract definition file.",
                    "type": "string"
                  },
                  "gas": {
                    "description": "the gas field is an object with one field per contract function that you will call in your test. The value of these fields should be set to the amount of gas that will be required to execute your transaction. There is no need for this number to be an exact match, as it’s used to set the gas limit for the transaction, so if your transaction might have a variable gas cost, just set this value to the highest gas usage that you would expect to see for your transaction." ,
                    "type": "object",
                    "properties": {
                      "open": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "integer"
                      },
                      "transfer": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "open",
                      "query",
                      "transfer"
                    ]
                  }
                },
                "required": [
                  "path",
                  "gas"
                ]
              }
            },
            "required": [
              "simple"
            ]
          }
        },
        "required": [
          "url",
          "contractDeployerAddress",
          "contractDeployerAddressPassword",
          "fromAddress",
          "fromAddressPassword",
          "transactionConfirmationBlocks",
          "contracts"
        ]
      }
    },
    "required": [
      "caliper",
      "ethereum"
    ]
  }